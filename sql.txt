drop database babystory;
create database babystory;

use babystory;

CREATE TABLE parent(
    parent_id VARCHAR(255) PRIMARY KEY NOT NULL,
    password VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    name VARCHAR(50),
    nickname VARCHAR(255) NOT NULL,
    gender tinyint(3),
    signInMethod VARCHAR(50) NOT NULL,
    emailVerified boolean NOT NULL,
    photoId VARCHAR(255),
    description VARCHAR(255),
    mainAddr VARCHAR(50),
    subAddr VARCHAR(255),
    hashList VARCHAR(100)
);

CREATE TABLE baby(
    baby_id VARCHAR(255) NOT NULL PRIMARY KEY,
    obn VARCHAR(255) NOT NULL,
    name VARCHAR(255),
    gender tinyint(3),
    birthDate DATETIME,
    bloodType CHAR(3),
    cm FLOAT,
    kg FLOAT,
    photoId VARCHAR(255)
);

CREATE TABLE babystate (
    state_id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
    baby_id VARCHAR(255) NOT NULL,
    createTime DATETIME NOT NULL,
    cm FLOAT,
    kg FLOAT,
    FOREIGN KEY (baby_id) REFERENCES baby(baby_id)
);

CREATE TABLE babycry (
    babycry_id INT PRIMARY KEY auto_increment NOT NULL,
    baby_id VARCHAR(255) NOT NULL,
    createTime DATETIME,
    cryType VARCHAR(50),
    audioId CHAR(36),
    predictMap JSON,
    intensity tinyint(3),
    duration FLOAT,
    FOREIGN KEY (baby_id) REFERENCES baby(baby_id)
);

CREATE TABLE pbconnect(
    pbc_id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
    parent_id VARCHAR(255) NOT NULL,
    baby_id VARCHAR(255) NOT NULL,
    FOREIGN KEY (parent_id) REFERENCES parent(parent_id),
    FOREIGN KEY (baby_id) REFERENCES baby(baby_id)
);

CREATE TABLE chatroom(
    room_id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
    parent_id VARCHAR(255) NOT NULL,
    name VARCHAR(100) NOT NULL,
    memberCount INT NOT NULL,
    FOREIGN KEY (parent_id) REFERENCES parent(parent_id)
);

CREATE TABLE chat(
    chat_id INT PRIMARY KEY auto_increment NOT NULL,
    parent_id VARCHAR(255) NOT NULL,
    room_id INT NOT NULL,
    createTime DATETIME NOT NULL,
    chatType VARCHAR(255) NOT NULL,
    content TEXT NOT NULL,
    FOREIGN KEY (room_id) REFERENCES chatroom(room_id),
    FOREIGN KEY (parent_id) REFERENCES parent(parent_id)
);

CREATE TABLE pcconnect(
    pcc_id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    parent_id VARCHAR(255) NOT NULL,
    room_id INT NOT NULL,
    FOREIGN KEY (parent_id) REFERENCES parent(parent_id),
    FOREIGN KEY (room_id) REFERENCES chatroom(room_id)
);

CREATE TABLE aidoctorroom (
    id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
    parent_id VARCHAR(255) NOT NULL,
    createTime DATETIME NOT NULL,
    lastChat JSON,
    FOREIGN KEY (parent_id) REFERENCES parent(parent_id)
);

CREATE TABLE aidoctorchat (
    id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
    parent_id VARCHAR(255) NOT NULL,
    room_id INT NOT NULL,
    createTime DATETIME NOT NULL,
    ask TEXT NOT NULL,
    res TEXT NOT NULL,
    hospital JSON,
    FOREIGN KEY (parent_id) REFERENCES parent(parent_id),
    FOREIGN KEY (room_id) REFERENCES aidoctorroom(id)
);

CREATE TABLE post(
    post_id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
    parent_id VARCHAR(255) NOT NULL,
    reveal tinyint(4) NOT NULL,
    title VARCHAR(144) NOT NULL,
    createTime DATETIME NOT NULL,
    modifyTime DATETIME,
    deleteTime DATETIME,
    pHeart INT UNSIGNED DEFAULT 0,
    pScript INT UNSIGNED DEFAULT 0,
    pView INT UNSIGNED DEFAULT 0,
    pComment INT UNSIGNED DEFAULT 0,
    hashList VARCHAR(100),
    FOREIGN KEY (parent_id) REFERENCES parent(parent_id)
);

CREATE TABLE pheart(
    pheart_id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
    parent_id VARCHAR(255) NOT NULL,
    post_id INT NOT NULL,
    createTime DATETIME,
    FOREIGN KEY (post_id) REFERENCES post(post_id),
    FOREIGN KEY (parent_id) REFERENCES parent(parent_id)
);

CREATE TABLE pscript(
    script_id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    parent_id VARCHAR(255) NOT NULL,
    post_id INT NOT NULL,
    createTime DATETIME,
    FOREIGN KEY (post_id) REFERENCES post(post_id),
    FOREIGN KEY (parent_id) REFERENCES parent(parent_id)
);

CREATE TABLE pview(
    view_id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    parent_id VARCHAR(255) NOT NULL,
    post_id INT NOT NULL,
    createTime DATETIME,
    FOREIGN KEY (post_id) REFERENCES post(post_id),
    FOREIGN KEY (parent_id) REFERENCES parent(parent_id)
);

CREATE TABLE pcomment(
    comment_id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
    parent_id VARCHAR(255) NOT NULL,
    post_id INT NOT NULL,
    reply_id INT,
    content TEXT NOT NULL,
    createTime DATETIME NOT NULL,
    modifyTime DATETIME,
    deleteTime DATETIME,
    cheart INT DEFAULT 0,
    FOREIGN KEY (post_id) REFERENCES post(post_id),
    FOREIGN KEY (parent_id) REFERENCES parent(parent_id),
    FOREIGN KEY (reply_id) REFERENCES pcomment(comment_id)
);

CREATE TABLE cheart (
    cheart_id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
    parent_id VARCHAR(255) NOT NULL,
    comment_id INT NOT NULL,
    createTime DATETIME NOT NULL,
    FOREIGN KEY (comment_id) REFERENCES pcomment(comment_id),
    FOREIGN KEY (parent_id) REFERENCES parent(parent_id)
);

CREATE TABLE diary (
    diary_id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
    parent_id VARCHAR(255) NOT NULL,
    baby_id VARCHAR(255) NOT NULL,
    born TINYINT NOT NULL,
    title VARCHAR(50) NOT NULL,
    createTime DATETIME NOT NULL,
    modifyTime DATETIME,
    deleteTime DATETIME,
    FOREIGN KEY (parent_id) REFERENCES parent(parent_id),
    FOREIGN KEY (baby_id) REFERENCES baby(baby_id)
);

CREATE TABLE dday (
    dday_id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
    diary_id INT NOT NULL,
    parent_id VARCHAR(255) NOT NULL,
    title VARCHAR(50) NOT NULL,
    createTime DATETIME NOT NULL,
    modifyTime DATETIME,
    deleteTime DATETIME,
    FOREIGN KEY (diary_id) REFERENCES diary(diary_id)
);

CREATE TABLE hospital (
    hospital_id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
    diary_id INT NOT NULL,
    baby_id VARCHAR(255) NOT NULL,
    createTime DATETIME NOT NULL,
    modifyTime DATETIME,
    deleteTime DATETIME,
    parent_kg FLOAT NOT NULL,
    bpressure FLOAT NOT NULL,
    baby_kg FLOAT,
    baby_cm INT,
    special TEXT,
    next_day DATETIME,
    FOREIGN KEY (diary_id) REFERENCES diary(diary_id)
);

CREATE TABLE milk (
    milk_id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
    diary_id INT NOT NULL,
    baby_id VARCHAR(255) NOT NULL,
    milk INT NOT NULL,
    amount INT NOT NULL,
    mtime DATETIME NOT NULL,
    FOREIGN KEY (diary_id) REFERENCES diary(diary_id)
);

CREATE TABLE deal (
    deal_id INT PRIMARY KEY auto_increment NOT NULL,
    parent_id VARCHAR(255) NOT NULL,
    title VARCHAR(20) NOT NULL,
    content TEXT NOT NULL,
    photoId VARCHAR(255) NOT NULL,
    price INT NOT NULL,
    createTime DATETIME NOT NULL,
    dheart INT DEFAULT 0,
    dview INT DEFAULT 0,
    FOREIGN KEY (parent_id) REFERENCES parent(parent_id)
);

CREATE TABLE dheart (
    dheart_id INT PRIMARY KEY auto_increment NOT NULL,
    parent_id VARCHAR(255) NOT NULL,
    deal_id INT NOT NULL,
    createTime DATETIME NOT NULL,
    FOREIGN KEY (deal_id) REFERENCES deal(deal_id),
    FOREIGN KEY (parent_id) REFERENCES parent(parent_id)
);

CREATE TABLE dview(
    view_id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    parent_id VARCHAR(255) NOT NULL,
    deal_id INT NOT NULL,
    createTime DATETIME,
    FOREIGN KEY (deal_id) REFERENCES deal(deal_id),
    FOREIGN KEY (parent_id) REFERENCES parent(parent_id)
);

CREATE TABLE friend (
    friend_id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
    parent_id VARCHAR(255) NOT NULL,
    friend VARCHAR(255) NOT NULL,
    FOREIGN KEY (parent_id) REFERENCES parent(parent_id),
    FOREIGN KEY (friend) REFERENCES parent(parent_id)
);

CREATE TABLE purchase (
    purchase_id INT PRIMARY KEY auto_increment NOT NULL,
    parent_id VARCHAR(255) NOT NULL,
    title VARCHAR(100) NOT NULL,
    content TEXT NOT NULL,
    photoId VARCHAR(255) NOT NULL,
    createTime DATETIME NOT NULL,
    link VARCHAR(255) NOT NULL,
    jheart INT DEFAULT 0,
    jview INT DEFAULT 0,
    joint INT DEFAULT 0,
    FOREIGN KEY (parent_id) REFERENCES parent(parent_id)
);

CREATE TABLE jheart(
    jheart_id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
    parent_id VARCHAR(255) NOT NULL,
    purchase_id INT NOT NULL,
    createTime DATETIME,
    FOREIGN KEY (purchase_id) REFERENCES purchase(purchase_id),
    FOREIGN KEY (parent_id) REFERENCES parent(parent_id)
);

CREATE TABLE jview(
    jview_id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    parent_id VARCHAR(255) NOT NULL,
    purchase_id INT NOT NULL,
    createTime DATETIME,
    FOREIGN KEY (purchase_id) REFERENCES purchase(purchase_id),
    FOREIGN KEY (parent_id) REFERENCES parent(parent_id)
);

CREATE TABLE joint (
    joint_id INT PRIMARY KEY auto_increment NOT NULL,
    parent_id VARCHAR(255) NOT NULL,
    purchase_id INT NOT NULL,
    FOREIGN KEY (purchase_id) REFERENCES purchase(purchase_id),
    FOREIGN KEY (parent_id) REFERENCES parent(parent_id)
);

CREATE TABLE alert (
    alert_id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
    parent_id VARCHAR(255) NOT NULL,
    createTime DATETIME NOT NULL,
    hasChecked TINYINT NOT NULL,
    createrId VARCHAR(255),
    alert_type VARCHAR(255),
    message VARCHAR(255) NOT NULL,
	action JSON,
    FOREIGN KEY (parent_id) REFERENCES parent(parent_id),
    FOREIGN KEY (createrId) REFERENCES parent(parent_id)
);

CREATE TABLE alertsub (
    id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
    creater_id VARCHAR(255) NOT NULL,
    subscriber_id VARCHAR(255) NOT NULL,
    createTime DATETIME NOT NULL,
    FOREIGN KEY (creater_id) REFERENCES parent(parent_id),
    FOREIGN KEY (subscriber_id) REFERENCES parent(parent_id)
);



DELIMITER $$

CREATE TRIGGER pheart_insert
AFTER INSERT ON pheart
FOR EACH ROW
BEGIN
    UPDATE post
    SET pheart = IFNULL(pheart, 0) + 1
    WHERE post_id = NEW.post_id;
END $$

DELIMITER ;

DELIMITER $$

CREATE TRIGGER pheart_delete
AFTER DELETE ON pheart
FOR EACH ROW
BEGIN
    UPDATE post
    SET pheart = IFNULL(pheart, 0) - 1
    WHERE post_id = OLD.post_id;
END $$

DELIMITER ;

DELIMITER $$

CREATE TRIGGER pscript_insert
AFTER INSERT ON pscript
FOR EACH ROW
BEGIN
    UPDATE post
    SET pscript = IFNULL(pscript, 0) + 1
    WHERE post_id = NEW.post_id;
END $$

DELIMITER ;

DELIMITER $$

CREATE TRIGGER pscript_delete
AFTER DELETE ON pscript
FOR EACH ROW
BEGIN
    UPDATE post
    SET pscript = IFNULL(pscript, 0) - 1
    WHERE post_id = OLD.post_id;
END $$

DELIMITER ;

DELIMITER $$

CREATE TRIGGER pview_insert
AFTER INSERT ON pview
FOR EACH ROW
BEGIN
    UPDATE post
    SET pview = IFNULL(pview, 0) + 1
    WHERE post_id = NEW.post_id;
END $$

DELIMITER ;

DELIMITER $$

CREATE TRIGGER pview_delete
AFTER DELETE ON pview
FOR EACH ROW
BEGIN
    UPDATE post
    SET pview = IFNULL(pview, 0) - 1
    WHERE post_id = OLD.post_id;
END $$  

DELIMITER ;

DELIMITER $$

CREATE TRIGGER pcomment_insert
AFTER INSERT ON pcomment
FOR EACH ROW
BEGIN
    UPDATE post
    SET pcomment = IFNULL(pcomment, 0) + 1
    WHERE post_id = NEW.post_id;
END $$

DELIMITER ;

DELIMITER $$

CREATE TRIGGER pcomment_delete
AFTER DELETE ON pcomment
FOR EACH ROW
BEGIN
    UPDATE post
    SET pcomment = IFNULL(pcomment, 0) - 1
    WHERE post_id = OLD.post_id;
END $$

DELIMITER ;



DELIMITER $$

CREATE TRIGGER cheart_insert
AFTER INSERT ON cheart
FOR EACH ROW
BEGIN
    UPDATE pcomment
    SET cheart = IFNULL(cheart, 0) + 1
    WHERE comment_id = NEW.comment_id;
END $$

DELIMITER ;

DELIMITER $$

CREATE TRIGGER cheart_delete
AFTER DELETE ON cheart
FOR EACH ROW
BEGIN
    UPDATE pcomment
    SET cheart = IFNULL(cheart, 0) - 1
    WHERE comment_id = OLD.comment_id;
END $$

DELIMITER ;

DELIMITER $$

CREATE TRIGGER alert_createPost
AFTER INSERT ON post
FOR EACH ROW
BEGIN
    DECLARE post_owner_nickname VARCHAR(255);
    SELECT nickname INTO post_owner_nickname
    FROM parent
    WHERE parent_id = NEW.parent_id;

    INSERT INTO alert (parent_id, createTime, hasChecked, createrId, alert_type, message, action)
    SELECT 
        sub.subscriber_id,
        CURRENT_TIMESTAMP,
        FALSE,
        NEW.parent_id,
        'subscribe_post',
        CONCAT(post_owner_nickname, '님이 새로운 이야기를 작성하셨어요!'),
        JSON_OBJECT('post_id', NEW.post_id)
    FROM alertsub as sub
    WHERE sub.creater_id = NEW.parent_id;
END $$

DELIMITER ;

DELIMITER $$

CREATE TRIGGER alert_friendHeart
AFTER INSERT ON pheart
FOR EACH ROW
BEGIN
    DECLARE post_owner_id VARCHAR(255);
    DECLARE post_owner_nickname VARCHAR(255);
    
    SELECT parent_id INTO post_owner_id
    FROM post
    WHERE post_id = NEW.post_id;

    SELECT nickname INTO post_owner_nickname
    FROM parent
    WHERE parent_id = NEW.parent_id;

    INSERT INTO alert (parent_id, createTime, hasChecked, createrId, alert_type, message, action)
    SELECT 
        fr.parent_id,
        CURRENT_TIMESTAMP,
        FALSE,
        NEW.parent_id,
        'post_heart',
        CONCAT(post_owner_nickname, '님이 새로운 좋아요를 하셨어요!'),
        JSON_OBJECT('post_id', NEW.post_id)
    FROM friend as fr
    WHERE fr.parent_id = post_owner_id
    AND fr.friend = NEW.parent_id;
END $$

DELIMITER ;

DELIMITER $$

CREATE TRIGGER alert_friendScript
AFTER INSERT ON pscript
FOR EACH ROW
BEGIN
    DECLARE post_owner_id VARCHAR(255);
    DECLARE post_owner_nickname VARCHAR(255);
    
    SELECT parent_id INTO post_owner_id
    FROM post
    WHERE post_id = NEW.post_id;

    SELECT nickname INTO post_owner_nickname
    FROM parent
    WHERE parent_id = NEW.parent_id;

    INSERT INTO alert (parent_id, createTime, hasChecked, createrId, alert_type, message, action)
    SELECT 
        fr.parent_id,
        CURRENT_TIMESTAMP,
        FALSE,
        NEW.parent_id,
        'post_script',
        CONCAT(post_owner_nickname, '님이 새로운 스크랩을 하셨어요!'),
        JSON_OBJECT('post_id', NEW.post_id)
    FROM friend as fr
    WHERE fr.parent_id = post_owner_id
    AND fr.friend = NEW.parent_id;
END $$

DELIMITER ;

DELIMITER $$

CREATE TRIGGER alert_newFriend
AFTER INSERT ON friend
FOR EACH ROW
BEGIN
    DECLARE post_owner_nickname VARCHAR(255);
    SELECT nickname INTO post_owner_nickname
    FROM parent
    WHERE parent_id = NEW.parent_id;

    INSERT INTO alert (parent_id, createTime, hasChecked, createrId, alert_type, message, action)
    VALUES (
        NEW.friend,
        CURRENT_TIMESTAMP,
        FALSE,
        NEW.parent_id,
        'new_friend',
        CONCAT(post_owner_nickname, '님과 친구가 되었어요!'),
        JSON_OBJECT('parent_id', NEW.parent_id)
    );
END $$

DELIMITER ;

DELIMITER $$

CREATE TRIGGER alert_postComment
AFTER INSERT ON pcomment
FOR EACH ROW
BEGIN
    DECLARE post_owner_id VARCHAR(255);
    DECLARE post_owner_nickname VARCHAR(255);

    SELECT parent_id INTO post_owner_id
    FROM post
    WHERE post_id = NEW.post_id;

    SELECT nickname INTO post_owner_nickname
    FROM parent
    WHERE parent_id = NEW.parent_id;

    INSERT INTO alert (parent_id, createTime, hasChecked, createrId, alert_type, message, action)
    VALUES (
    post_owner_id,
    CURRENT_TIMESTAMP,
    FALSE,
    NEW.parent_id,
    'new_comment',
    CONCAT(post_owner_nickname, '님의 댓글: ', NEW.content),
    JSON_OBJECT(
        'post_id', NEW.post_id,
        'message', NEW.content)
    );
END $$

DELIMITER ;

-- Parent 데이터 업데이트 (P001 주소 유지)
UPDATE parent
SET mainAddr = '기흥구', subAddr = '구갈동'
WHERE parent_id = 'P001';

-- Parent 데이터 추가
INSERT INTO parent (parent_id, password, email, name, nickname, gender, signInMethod, emailVerified, photoId, description, mainAddr, subAddr, hashList)
VALUES
('P001', 'hash_password1', 'importjaewone@gmail.com', '김철수', '딱풀이아빠', 1, 'google', 1, 'P001.jpg', '쌍둥이 아기의 사랑하는 아빠', '서울시 은평구', '구갈동', '초음파, 가족, 태명'),
('P002', 'hash_password2', 'parent2@email.com', '이영희', '튼튼이맘', 0, 'email', 1, 'P002.jpg', '첫 아기를 임신중인 워킹맘', '서울시 은평구', NULL, '가족,영아'),
('P003', 'hash_password3', 'parent3@gmail.com', '박민수', '열무아빠', 1, 'google', 1, 'P003.jpg', '신생아 돌보는 전업 아빠', '서울시 은평구', NULL, '신생아,이유식'),
('P004', 'hash_password4', 'parent4@naver.com', '정미영', '두리맘', 0, 'naver', 0, NULL, '조언을 구하는 신생아 부모', '서울시 서초구', '잠원동', '신생아,초보부모'),
('P005', 'hash_password5', 'parent5@naver.com', '이대현', '보리아빠', 1, 'naver', 1, 'P005.jpg', '18개월 아기 아빠', '서울시 은평구', NULL, '육아,걸음마'),
('P006', 'hash_password6', 'parent6@gmail.com', '김나영', '별이맘', 0, 'google', 1, 'P006.jpg', '둘째 출산을 앞둔 엄마', '서울시 은평구', NULL, '출산준비,산모'),
('P010', 'hash_password10', 'parent10@gmail.com', '박수진', '딱풀맘', 0, 'google', 0, NULL, '막내딸 출산 예정', '서울시 은평구', NULL, '출산준비,둘째');


-- Friend 데이터 추가
INSERT INTO friend (parent_id, friend)
VALUES 
('P001', 'P002'), ('P002', 'P001'),
('P001', 'P003'), ('P001', 'P004'),
('P005','P001');


-- Baby 데이터 추가
INSERT INTO baby (baby_id, obn, name, gender, birthDate, bloodType, cm, kg, photoId)
VALUES
('b-5116', '딱풀이', NULL, NULL, NULL, NULL, 46.2, 10.6, 'b-5116.jpg'),
('b-7201', '튼튼이', '서연', 1, '2022-04-26 13:14:25', 'AB+', 42.6, 9.8, 'b-7201.jpg'),
('b-6677', '열무', '지후', 2, '2023-07-25 18:17:25', 'O+', 57.3, 7.4, 'b-6677.jpg');


-- Parent와 Baby 연결
INSERT INTO pbconnect (parent_id, baby_id)
VALUES
('P001', 'b-5116'),
('P010', 'b-5116'),
('P001', 'b-7201'),
('P010', 'b-7201'),
('P001', 'b-6677'),
('P010', 'b-6677');


-- Post 데이터 추가
INSERT INTO post (parent_id, reveal, title, createTime, modifyTime, deleteTime, pHeart, pScript, pView, pComment, hashList)
VALUES
('P001', 3, '아기 첫 이유식 도전', NOW() - INTERVAL 14 DAY, NULL, NULL, 2, 6, 6, NULL, '이유식,가족,신생아'),
('P001', 2, '아기와 함께하는 첫 여행 계획', NOW() - INTERVAL 12 DAY - INTERVAL 8 HOUR, NULL, NULL, 6, 3, 6, NULL, '여행,영아'),
('P001', 1, '신생아 육아 팁', NOW() - INTERVAL 10 DAY - INTERVAL 16 HOUR, NULL, NULL, 4, 5, 6, NULL, '육아,신생아'),
('P001', 0, '아기를 위한 건강식 아이디어', NOW() - INTERVAL 9 DAY - INTERVAL 4 HOUR, NULL, NULL, 6, 5, 6, NULL, '이유식,건강,영아'),
('P001', 3, '아기 육아와 일 병행하기', NOW() - INTERVAL 7 DAY - INTERVAL 12 HOUR, NULL, NULL, 3, 4, 6, NULL, '워라밸,육아'),
('P002', 3, '임테기 두줄 !!!', NOW() - INTERVAL 6 DAY - INTERVAL 3 HOUR, NULL, NULL, 1, 1, NULL, NULL, '임신테스트기,임테기,두줄'),
('P002', 3, '첫 초음파', NOW() - INTERVAL 4 DAY - INTERVAL 9 HOUR, NULL, NULL, NULL, 1, 1, NULL, '초음파,산부인과'),
('P002', 3, '태명 짓기', NOW() - INTERVAL 2 DAY - INTERVAL 18 HOUR, NULL, NULL, 1, NULL, 1, NULL, '태명,초음파'),
('P002', 3, '첫 특별검사', NOW() - INTERVAL 2 DAY - INTERVAL 6 HOUR, NULL, NULL, NULL, 1, NULL, NULL, '특별검사,산부인과,초음파'),
('P002', 3, '드디어 성별 확인했어요 !', NOW() - INTERVAL 1 DAY - INTERVAL 1 HOUR, NULL, NULL, 1, NULL, NULL, NULL, '산부인과,초음파'),
('P003', 3, '첫 모유 수유를 했어요 !', NOW() - INTERVAL 5 DAY - INTERVAL 7 HOUR, NULL, NULL, NULL, 1, 1, NULL, '모유,수유,신생아'),
('P003', 3, '분유 도전', NOW() - INTERVAL 3 DAY - INTERVAL 14 HOUR, NULL, NULL, 1, NULL, 1, NULL, '분유,수유,신생아'),
('P003', 3, '첫 옹알이', NOW() - INTERVAL 1 DAY - INTERVAL 20 HOUR, NULL, NULL, 1, 1, 1, NULL, '신생아,옹알이,가족,영아기'),
('P003', 3, '첫 이유식 도전기', NOW() - INTERVAL 1 DAY - INTERVAL 5 HOUR, NULL, NULL, NULL, 1, NULL, NULL, '이유식,영아기'),
('P003', 3, '아기들이 잘 먹는 이유식 만들기', NOW(), NULL, NULL, 1, NULL, 1, NULL, '이유식,레시피,가족');


-- Post Heart 데이터 추가
INSERT INTO pheart (parent_id, post_id, createTime)
VALUES 
('P001', 6, NOW()), ('P001', 8, NOW()), ('P001', 10, NOW()), ('P001', 12, NOW()), ('P001', 13, NOW()),  ('P001', 15, NOW()),
('P002', 2, NOW()), ('P002', 3, NOW()), ('P002', 4, NOW()),
('P003', 2, NOW()), ('P003', 4, NOW()), ('P003', 5, NOW()),
('P004', 1, NOW()), ('P004', 3, NOW()), ('P004', 4, NOW()), ('P004', 2, NOW()), ('P004', 5, NOW()),
('P005', 1, NOW()), ('P005', 3, NOW()), ('P005', 4, NOW()), ('P005', 2, NOW()), ('P005', 5, NOW()),
('P006', 2, NOW()), ('P006', 4, NOW()),
('P010', 2, NOW()), ('P010', 3, NOW()), ('P010', 4, NOW());


-- Post Script 데이터 추가
INSERT INTO pscript (parent_id, post_id, createTime)
VALUES 
('P001', 6, NOW()), ('P001', 7, NOW()), ('P001', 9, NOW()), ('P001', 11, NOW()), ('P001', 13, NOW()),  ('P001', 14, NOW()),
('P002', 1, NOW()), ('P002', 3, NOW()), ('P002', 4, NOW()), ('P002', 5, NOW()),
('P003', 1, NOW()), ('P003', 3, NOW()), ('P003', 4, NOW()),
('P004', 1, NOW()), ('P004', 3, NOW()), ('P004', 4, NOW()), ('P004', 2, NOW()), ('P004', 5, NOW()),
('P005', 1, NOW()), ('P005', 3, NOW()), ('P005', 4, NOW()), ('P005', 2, NOW()), ('P005', 5, NOW()),
('P006', 1, NOW()), ('P006', 2, NOW()),
('P010', 1, NOW()), ('P010', 3, NOW()), ('P010', 4, NOW()), ('P010', 5, NOW());


-- Post View 데이터 추가
INSERT INTO pview (parent_id, post_id, createTime)
VALUES 
('P001', 7, NOW()), ('P001', 8, NOW()), ('P001', 11, NOW()), ('P001', 12, NOW()), ('P001', 13, NOW()),  ('P001', 15, NOW()),
('P002', 1, NOW()), ('P002', 3, NOW()), ('P002', 4, NOW()), ('P002', 2, NOW()), ('P002', 5, NOW()),
('P003', 1, NOW()), ('P003', 3, NOW()), ('P003', 4, NOW()), ('P003', 2, NOW()), ('P003', 5, NOW()),
('P004', 1, NOW()), ('P004', 3, NOW()), ('P004', 4, NOW()), ('P004', 2, NOW()), ('P004', 5, NOW()),
('P005', 1, NOW()), ('P005', 3, NOW()), ('P005', 4, NOW()), ('P005', 2, NOW()), ('P005', 5, NOW()),
('P006', 1, NOW()), ('P006', 3, NOW()), ('P006', 4, NOW()), ('P006', 2, NOW()), ('P006', 5, NOW()),
('P010', 1, NOW()), ('P010', 3, NOW()), ('P010', 4, NOW()), ('P010', 2, NOW()), ('P010', 5, NOW());


-- Post Comment 데이터 추가
INSERT INTO pcomment (parent_id, post_id, reply_id, content, createTime, modifyTime, deleteTime, cheart)
VALUES
('P004', 1, NULL, '정말 좋은 글이네요!', NOW(), NULL, NULL, 0),
('P002', 1, NULL, '읽는 동안 정말 즐거웠어요!', NOW() + INTERVAL 10 SECOND, NULL, NULL, 0),
('P002', 1, 1, '맞아요 좋은 글이네요!', NOW() + INTERVAL 20 SECOND, NULL, NULL, 0),
('P003', 1, 1, '저도 즐겁게 읽었어요', NOW() + INTERVAL 30 SECOND, NULL, NULL, 0);

INSERT INTO cheart (parent_id, comment_id, createTime)
VALUES ('P001', 1, NOW());


-- Diary 데이터 추가
INSERT INTO diary (parent_id, baby_id, born, title, createTime, modifyTime, deleteTime) VALUES
  ('P001', 'b-5116', 0, '엄마의 딱풀 이야기', '2024-10-01 16:30:00', NULL, NULL),
  ('P001', 'b-7201', 0, '튼튼이의 여정', '2023-12-01 16:30:00', NULL, NULL),
  ('P001', 'b-7201', 1, '서연이의 첫 호흡', '2024-10-01 16:30:00', NULL, NULL),
  ('P001', 'b-6677', 1, '열무 키우기', '2022-11-01 16:30:00', NULL, NULL),
  ('P001', 'b-6677', 1, '태어났지후', '2023-11-01 16:30:00', NULL, NULL),
  ('P001', 'b-6677', 1, '지후의 성장일기', '2024-11-01 16:30:00', NULL, NULL);



-- DDay 데이터 추가
INSERT INTO diary (diary_id, parent_id, title, createTime, modifyTime, deleteTime) VALUES
(2, 'P001', '새로운 시작의 기쁨', '2024-01-23 00:00:00', NULL, NULL),
(2, 'P001', '입덧의 고통 속에서도', '2024-02-01 00:00:00', NULL, NULL),
(2, 'P001', '튼튼이의 첫 시작', '2024-02-13 00:00:00', NULL, NULL),
(2, 'P001', '드디어 안정기 !!', '2024-04-21 00:00:00', NULL, NULL),
(2, 'P001', '만삭의 설렘', '2024-09-15 00:00:00', NULL, NULL),
(3, 'P001', '드디어 만난 우리 아기, 튼튼이', '2024-10-01 00:00:00', NULL, NULL),
(3, 'P001', '서연이가 된 튼튼이', '2024-10-07 00:00:00', NULL, NULL),
(3, 'P001', '정식으로 서연이가 된 순간', '2024-10-13 00:00:00', NULL, NULL);


-- Hospital 데이터 추가
INSERT INTO hospital (diary_id, baby_id, createTime, modifyTime, deleteTime, parent_kg, bpressure, baby_kg, baby_cm, special, next_day) VALUES
(2, 'b-7201', '2024-01-23 00:00:00', NULL, NULL, '목덜미 투명대 검사 (Nuchal Translucency, NT) = 정상, 초기 기형아 검사 = 정상, NIPT (비침습적 산전검사) = 정상', NULL, NULL, NULL, NULL, '2024-02-13 00:00:00'),
(2, 'b-7201', '2024-02-13 00:00:00', NULL, NULL, '쿼드 검사 (Quad Test) = 정상, 양수검사 (Amniocentesis) = 정상', NULL, NULL, NULL, NULL, '2024-04-21 00:00:00'),
(2, 'b-7201', '2024-04-21 00:00:00', NULL, NULL, '당뇨 검사 (Oral Glucose Tolerance Test, OGTT) = 임신성 당뇨, 소변 검사 = 정상, 후기 초음파 검사 = 정상', NULL, NULL, NULL, NULL, '2024-09-21 00:00:00'),
(2, 'b-7201', '2024-09-21 00:00:00', NULL, NULL, '비수축 검사 (Non-Stress Test, NST) = Non-Reactive, 양수 지수 (Amniotic Fluid Index, AFI) = Polyhydramnios, 분만 준비 검사 = 정상', NULL, NULL, NULL, NULL, NULL);


-- Milk 데이터 추가
INSERT INTO milk (diary_id, baby_id, milk, amount, mtime) VALUES
(3, 'b-7201', 0, 100, '2024-10-01 16:30:00'),
(3, 'b-7201', 0, 100, '2024-10-01 18:00:00'),
(3, 'b-7201', 0, 100, '2024-10-01 18:30:00'),
(3, 'b-7201', 0, 100, '2024-10-01 19:00:00'),
(3, 'b-7201', 0, 100, '2024-10-01 19:30:00'),
(3, 'b-7201', 0, 100, '2024-10-01 20:00:00'),
(3, 'b-7201', 0, 100, '2024-10-01 20:30:00'),
(3, 'b-7201', 0, 100, '2024-10-01 21:00:00'),
(3, 'b-7201', 0, 100, '2024-10-01 21:30:00'),
(3, 'b-7201', 0, 100, '2024-10-02 21:00:00'),
(3, 'b-7201', 0, 100, '2024-10-03 21:30:00'),
(3, 'b-7201', 0, 100, '2024-10-04 21:00:00'),
(3, 'b-7201', 0, 100, '2024-10-05 21:30:00'),
(3, 'b-7201', 0, 100, '2024-10-06 21:00:00'),
(3, 'b-7201', 1, 100, '2024-10-07 21:00:00'),
(3, 'b-7201', 1, 100, '2024-10-07 21:30:00');
