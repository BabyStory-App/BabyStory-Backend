drop database babystory;
create database babystory;

use babystory;

CREATE TABLE parent(
    parent_id VARCHAR(255) PRIMARY KEY NOT NULL,
    password VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    name VARCHAR(50),
    nickname VARCHAR(255) NOT NULL,
    gender tinyint(3),
    signInMethod VARCHAR(50) NOT NULL,
    emailVerified boolean NOT NULL,
    photoId VARCHAR(255),
    description VARCHAR(255),
    mainAddr VARCHAR(50),
    subAddr VARCHAR(255),
    hashList VARCHAR(100)
);

CREATE TABLE baby(
    baby_id VARCHAR(255) NOT NULL PRIMARY KEY,
    obn VARCHAR(255) NOT NULL,
    name VARCHAR(255),
    gender tinyint(3),
    birthDate DATETIME,
    bloodType CHAR(3),
    cm FLOAT,
    kg FLOAT,
    photoId VARCHAR(255)
);

CREATE TABLE babystate (
    state_id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
    baby_id VARCHAR(255) NOT NULL,
    createTime DATETIME NOT NULL,
    cm FLOAT,
    kg FLOAT,
    FOREIGN KEY (baby_id) REFERENCES baby(baby_id)
);

CREATE TABLE babycry (
    babycry_id INT PRIMARY KEY auto_increment NOT NULL,
    baby_id VARCHAR(255) NOT NULL,
    createTime DATETIME,
    cryType VARCHAR(50),
    audioId CHAR(36),
    predictMap JSON,
    intensity tinyint(3),
    duration FLOAT,
    FOREIGN KEY (baby_id) REFERENCES baby(baby_id)
);

CREATE TABLE pbconnect(
    pbc_id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
    parent_id VARCHAR(255) NOT NULL,
    baby_id VARCHAR(255) NOT NULL,
    FOREIGN KEY (parent_id) REFERENCES parent(parent_id),
    FOREIGN KEY (baby_id) REFERENCES baby(baby_id)
);

CREATE TABLE chatroom(
    room_id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
    parent_id VARCHAR(255) NOT NULL,
    lastChat INT NOT NULL,
    name VARCHAR(100) NOT NULL,
    FOREIGN KEY (parent_id) REFERENCES parent(parent_id)
);

CREATE TABLE chat(
    chat_id INT PRIMARY KEY auto_increment NOT NULL,
    parent_id VARCHAR(255) NOT NULL,
    room_id INT NOT NULL,
    createTime DATETIME NOT NULL,
    chatType VARCHAR(255) NOT NULL,
    content TEXT NOT NULL,
    FOREIGN KEY (room_id) REFERENCES chatroom(room_id),
    FOREIGN KEY (parent_id) REFERENCES parent(parent_id)
);

ALTER TABLE chatroom
ADD CONSTRAINT fk_lastChat
FOREIGN KEY (lastChat) REFERENCES chat(chat_id);

CREATE TABLE pcconnect(
    pcc_id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    parent_id VARCHAR(255) NOT NULL,
    room_id INT NOT NULL,
    FOREIGN KEY (parent_id) REFERENCES parent(parent_id),
    FOREIGN KEY (room_id) REFERENCES chatroom(room_id)
);

CREATE TABLE aidoctor(
    ai_id INT PRIMARY KEY auto_increment NOT NULL,
    parent_id VARCHAR(255) NOT NULL,
    createTime DATETIME NOT NULL,
    ask text NOT NULL,
    res text NOT NULL,
    hAddr text,
    FOREIGN KEY (parent_id) REFERENCES parent(parent_id)
);

CREATE TABLE post(
    post_id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
    parent_id VARCHAR(255) NOT NULL,
    reveal tinyint(4) NOT NULL,
    title VARCHAR(144) NOT NULL,
    createTime DATETIME NOT NULL,
    modifyTime DATETIME,
    deleteTime DATETIME,
    pHeart INT UNSIGNED DEFAULT 0,
    pScript INT UNSIGNED DEFAULT 0,
    pView INT UNSIGNED DEFAULT 0,
    pComment INT UNSIGNED DEFAULT 0,
    hashList VARCHAR(100),
    FOREIGN KEY (parent_id) REFERENCES parent(parent_id)
);

CREATE TABLE pheart(
    pheart_id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
    parent_id VARCHAR(255) NOT NULL,
    post_id INT NOT NULL,
    createTime DATETIME,
    FOREIGN KEY (post_id) REFERENCES post(post_id),
    FOREIGN KEY (parent_id) REFERENCES parent(parent_id)
);

CREATE TABLE pscript(
    script_id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    parent_id VARCHAR(255) NOT NULL,
    post_id INT NOT NULL,
    createTime DATETIME,
    FOREIGN KEY (post_id) REFERENCES post(post_id),
    FOREIGN KEY (parent_id) REFERENCES parent(parent_id)
);

CREATE TABLE pview(
    view_id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    parent_id VARCHAR(255) NOT NULL,
    post_id INT NOT NULL,
    createTime DATETIME,
    FOREIGN KEY (post_id) REFERENCES post(post_id),
    FOREIGN KEY (parent_id) REFERENCES parent(parent_id)
);

CREATE TABLE pcomment(
    comment_id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
    parent_id VARCHAR(255) NOT NULL,
    post_id INT NOT NULL,
    reply_id INT,
    content TEXT NOT NULL,
    createTime DATETIME NOT NULL,
    modifyTime DATETIME,
    deleteTime DATETIME,
    cheart INT DEFAULT 0,
    FOREIGN KEY (post_id) REFERENCES post(post_id),
    FOREIGN KEY (parent_id) REFERENCES parent(parent_id),
    FOREIGN KEY (reply_id) REFERENCES pcomment(comment_id)
);

CREATE TABLE cheart (
    cheart_id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
    parent_id VARCHAR(255) NOT NULL,
    comment_id INT NOT NULL,
    createTime DATETIME NOT NULL,
    FOREIGN KEY (comment_id) REFERENCES pcomment(comment_id),
    FOREIGN KEY (parent_id) REFERENCES parent(parent_id)
);

CREATE TABLE deal (
    deal_id INT PRIMARY KEY auto_increment NOT NULL,
    parent_id VARCHAR(255) NOT NULL,
    title VARCHAR(20) NOT NULL,
    content TEXT NOT NULL,
    photoId VARCHAR(255) NOT NULL,
    price INT NOT NULL,
    createTime DATETIME NOT NULL,
    dheart INT DEFAULT 0,
    dview INT DEFAULT 0,
    FOREIGN KEY (parent_id) REFERENCES parent(parent_id)
);

CREATE TABLE dheart (
    dheart_id INT PRIMARY KEY auto_increment NOT NULL,
    parent_id VARCHAR(255) NOT NULL,
    deal_id INT NOT NULL,
    createTime DATETIME NOT NULL,
    FOREIGN KEY (deal_id) REFERENCES deal(deal_id),
    FOREIGN KEY (parent_id) REFERENCES parent(parent_id)
);

CREATE TABLE dview(
    view_id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    parent_id VARCHAR(255) NOT NULL,
    deal_id INT NOT NULL,
    createTime DATETIME,
    FOREIGN KEY (deal_id) REFERENCES deal(deal_id),
    FOREIGN KEY (parent_id) REFERENCES parent(parent_id)
);

CREATE TABLE friend (
    friend_id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
    parent_id VARCHAR(255) NOT NULL,
    friend VARCHAR(255) NOT NULL,
    FOREIGN KEY (parent_id) REFERENCES parent(parent_id),
    FOREIGN KEY (friend) REFERENCES parent(parent_id)
);

CREATE TABLE purchase (
    purchase_id INT PRIMARY KEY auto_increment NOT NULL,
    parent_id VARCHAR(255) NOT NULL,
    title VARCHAR(100) NOT NULL,
    content TEXT NOT NULL,
    photoId VARCHAR(255) NOT NULL,
    createTime DATETIME NOT NULL,
    link VARCHAR(255) NOT NULL,
    jheart INT DEFAULT 0,
    jview INT DEFAULT 0,
    joint INT DEFAULT 0,
    FOREIGN KEY (parent_id) REFERENCES parent(parent_id)
);

CREATE TABLE jheart(
    jheart_id INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
    parent_id VARCHAR(255) NOT NULL,
    purchase_id INT NOT NULL,
    createTime DATETIME,
    FOREIGN KEY (purchase_id) REFERENCES purchase(purchase_id),
    FOREIGN KEY (parent_id) REFERENCES parent(parent_id)
);

CREATE TABLE jview(
    jview_id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    parent_id VARCHAR(255) NOT NULL,
    purchase_id INT NOT NULL,
    createTime DATETIME,
    FOREIGN KEY (purchase_id) REFERENCES purchase(purchase_id),
    FOREIGN KEY (parent_id) REFERENCES parent(parent_id)
);

CREATE TABLE joint (
    joint_id INT PRIMARY KEY auto_increment NOT NULL,
    parent_id VARCHAR(255) NOT NULL,
    purchase_id INT NOT NULL,
    FOREIGN KEY (purchase_id) REFERENCES purchase(purchase_id),
    FOREIGN KEY (parent_id) REFERENCES parent(parent_id)
);

CREATE TABLE alert (
    alert_id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
    parent_id VARCHAR(255) NOT NULL,
    target VARCHAR(255),
    message TEXT NOT NULL,
    click boolean,
    FOREIGN KEY (parent_id) REFERENCES parent(parent_id),
    FOREIGN KEY (target) REFERENCES parent(parent_id)
);





DELIMITER $$

CREATE TRIGGER pheart_insert
AFTER INSERT ON pheart
FOR EACH ROW
BEGIN
    UPDATE post
    SET pheart = IFNULL(pheart, 0) + 1
    WHERE post_id = NEW.post_id;
END $$

DELIMITER ;

DELIMITER $$

CREATE TRIGGER pheart_delete
AFTER DELETE ON pheart
FOR EACH ROW
BEGIN
    UPDATE post
    SET pheart = IFNULL(pheart, 0) - 1
    WHERE post_id = OLD.post_id;
END $$

DELIMITER ;

DELIMITER $$

CREATE TRIGGER pscript_insert
AFTER INSERT ON pscript
FOR EACH ROW
BEGIN
    UPDATE post
    SET pscript = IFNULL(pscript, 0) + 1
    WHERE post_id = NEW.post_id;
END $$

DELIMITER ;

DELIMITER $$

CREATE TRIGGER pscript_delete
AFTER DELETE ON pscript
FOR EACH ROW
BEGIN
    UPDATE post
    SET pscript = IFNULL(pscript, 0) - 1
    WHERE post_id = OLD.post_id;
END $$

DELIMITER ;

DELIMITER $$

CREATE TRIGGER pview_insert
AFTER INSERT ON pview
FOR EACH ROW
BEGIN
    UPDATE post
    SET pview = IFNULL(pview, 0) + 1
    WHERE post_id = NEW.post_id;
END $$

DELIMITER ;

DELIMITER $$

CREATE TRIGGER pview_delete
AFTER DELETE ON pview
FOR EACH ROW
BEGIN
    UPDATE post
    SET pview = IFNULL(pview, 0) - 1
    WHERE post_id = OLD.post_id;
END $$  

DELIMITER ;

DELIMITER $$

CREATE TRIGGER pcomment_insert
AFTER INSERT ON pcomment
FOR EACH ROW
BEGIN
    UPDATE post
    SET pcomment = IFNULL(pcomment, 0) + 1
    WHERE post_id = NEW.post_id;
END $$

DELIMITER ;

DELIMITER $$

CREATE TRIGGER pcomment_delete
AFTER DELETE ON pcomment
FOR EACH ROW
BEGIN
    UPDATE post
    SET pcomment = IFNULL(pcomment, 0) - 1
    WHERE post_id = OLD.post_id;
END $$

DELIMITER ;



DELIMITER $$

CREATE TRIGGER cheart_insert
AFTER INSERT ON cheart
FOR EACH ROW
BEGIN
    UPDATE pcomment
    SET cheart = IFNULL(cheart, 0) + 1
    WHERE comment_id = NEW.comment_id;
END $$

DELIMITER ;

DELIMITER $$

CREATE TRIGGER cheart_delete
AFTER DELETE ON cheart
FOR EACH ROW
BEGIN
    UPDATE pcomment
    SET cheart = IFNULL(cheart, 0) - 1
    WHERE comment_id = OLD.comment_id;
END $$

DELIMITER ;